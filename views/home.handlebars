{{! Use the main layout }}
{{!< main }}

<section class="content-container">
    {{#if loggedIn}}
    <section class="post-form">
        <h2>Create a New Post</h2>
        <form id="postForm" action="/posts" method="POST" enctype="multipart/form-data" onsubmit="return validatePost()">
            <div class="form-group">
                <label for="post-title">Title:</label>
                <input type="text" id="post-title" name="title" required>
            </div>
            <div class="form-group">
                <label for="post-content">Content:</label>
                <textarea id="post-content" name="content" required></textarea>
            </div>
            <div class="form-group">
                <label for="post-image">Upload Image:</label>
                <input type="file" id="post-image" name="image">
                <p id="imageError" style="color: red; display: none;"></p>
            </div>
            <div class="form-actions">
                <button type="button" class="emoji-button" onclick="toggleEmojiPanel()">ðŸ˜€</button>
                <button type="submit" class="post-button">Post</button>
            </div>
        </form>
        <div id="emoji-container" class="emoji-panel" style="display: none;">
            <input type="text" id="emoji-search" class="emoji-search" placeholder="Search emojis..." oninput="searchEmojis()">
            <div id="emoji-grid"></div>
        </div>
    </section>
    {{/if}}

    <section class="posts-list">
    {{!-- Sorting Dropdown --}}
    <form id="sort-form" method="get" action="/">
        <label for="sort-by" class="sort-label">Sort by:</label>
        <select id="sort-by" name="sortBy" class="sort-dropdown" onchange="document.getElementById('sort-form').submit()">
            <option value="timestamp" {{#ifCond sortBy 'timestamp'}}selected{{/ifCond}}>Most Recent</option>
            <option value="likes" {{#ifCond sortBy 'likes'}}selected{{/ifCond}}>Most Liked</option>
        </select>
    </form>

        {{!-- recent posts --}}
        {{#if posts.length}}
            <ul>
                {{#each posts}}
                    {{!-- pass the userId and loggedIn to the partial --}}
                    {{> post this user=../user loggedIn=../loggedIn userId=../userId}}
                {{/each}}
            </ul>
        {{else}}
            {{!-- no posts --}}
            <p>No posts available. Be the first to post!</p>
        {{/if}}
    </section>
</section>

{{! JavaScript for Emoji Integration and File Validation }}
<script>
let allEmojis = []; // Global list to hold all emojis
const emojiAPIKey = 'f10a1936baef37cc9e915ad0e8bd87caebd2e329';

function toggleEmojiPanel() {
    const container = document.getElementById('emoji-container');
    container.style.display = container.style.display === 'none' ? 'block' : 'none';

    if (container.style.display === 'block' && allEmojis.length == 0) {
        fetch(`https://emoji-api.com/emojis?access_key=${emojiAPIKey}`)
            .then(response => response.json())
            .then(data => {
                allEmojis = data;
                displayEmojis(allEmojis);
            })
            .catch(error => console.error('Error fetching emojis:', error));
    }
}

function displayEmojis(emojis, limit = 200) {
    const container = document.getElementById('emoji-grid');
    container.innerHTML = '';
    if (Array.isArray(emojis) && emojis.length > 0) {
        emojis.slice(0, limit).forEach(emoji => {
            const emojiElement = document.createElement('span');
            emojiElement.textContent = emoji.character;
            emojiElement.title = emoji.slug;
            emojiElement.style.cursor = 'pointer';
            emojiElement.onclick = () => insertEmoji(emoji.character);
            container.appendChild(emojiElement);
        });
    } else {
        container.textContent = 'No emojis found. Try a different search!';
    }
}

function searchEmojis() {
    const searchTerm = document.getElementById('emoji-search').value.toLowerCase();
    const filteredEmojis = allEmojis.filter(emoji => emoji.slug.includes(searchTerm));
    displayEmojis(filteredEmojis);
}

function insertEmoji(emoji) {
    const textarea = document.getElementById('post-content');
    const startPos = textarea.selectionStart;
    const endPos = textarea.selectionEnd;
    const textBefore = textarea.value.substring(0, startPos);
    const textAfter = textarea.value.substring(endPos, textarea.value.length);
    textarea.value = textBefore + emoji + textAfter;
    textarea.selectionStart = textarea.selectionEnd = startPos + emoji.length;
    textarea.focus();
}

function validatePost() {
    const fileInput = document.getElementById('post-image');
    const file = fileInput.files[0];
    const imageError = document.getElementById('imageError');

    if (file) {
        const validTypes = ['image/jpeg', 'image/png'];
        const maxSize = 5 * 1024 * 1024; // 5MB

        if (!validTypes.includes(file.type)) {
            imageError.textContent = 'Only JPEG and PNG files are allowed.';
            imageError.style.display = 'block';
            return false;
        }

        if (file.size > maxSize) {
            imageError.textContent = 'File size should not exceed 5MB.';
            imageError.style.display = 'block';
            return false;
        }
    }

    imageError.style.display = 'none';
    return true;
}
</script>
